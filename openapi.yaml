openapi: 3.0.3
info:
  title: MCPLookup.org API
  version: 1.0.0
  description: |
    # MCPLookup.org API

    The universal MCP (Model Context Protocol) server discovery service API.

    ## Features

    - **üîç Smart Discovery**: Natural language queries and intent-based search
    - **üöÄ Transport Metadata**: Automated discovery of streaming HTTP capabilities  
    - **üîê DNS Verification**: Cryptographic proof of domain ownership
    - **üìä Real-time Health**: Live server status and performance metrics
    - **üåê CORS Support**: Web-friendly with comprehensive CORS metadata
    - **‚ö° High Performance**: Edge-deployed with global CDN

    ## Transport Capabilities

    The API automatically discovers and provides detailed metadata about MCP server transport capabilities:

    - **Protocol Support**: HTTP methods, content types, SSE streaming
    - **Session Management**: Session ID support and requirements  
    - **CORS Configuration**: Origins, methods, headers, credentials
    - **Security Features**: SSL requirements, origin validation
    - **Performance Metrics**: Response times, compression support

    This enables intelligent server selection and optimal client connections.

  contact:
    name: MCPLookup.org Support
    url: https://github.com/TSavo/mcplookup.org
    email: support@mcplookup.org
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://mcplookup.org/api/v1
    description: Production API
  - url: http://localhost:3000/api/v1
    description: Development API

security:
  - {}
  - BearerAuth: []

tags:
  - name: Discovery
    description: Find and search MCP servers
  - name: Registration
    description: Register and verify MCP servers
  - name: Health
    description: Server health and status monitoring
  - name: Transport
    description: Transport capabilities and metadata
  - name: User Management
    description: User onboarding and account management

paths:
  /discover:
    get:
      tags: [Discovery]
      summary: Discover MCP servers
      description: |
        Find MCP servers using natural language queries, intent-based search, or technical filters.

        **Enhanced with Transport Capabilities**: Results now include detailed transport metadata
        for intelligent server selection and optimal client connections.
      parameters:
        - name: query
          in: query
          schema:
            type: string
          description: Natural language query
          example: "file management tools for cloud storage"
        - name: intent
          in: query
          schema:
            type: string
          description: Specific intent or use case
          example: "data_processing"
        - name: domain
          in: query
          schema:
            type: string
          description: Specific domain to search for
          example: "gmail.com"
        - name: capability
          in: query
          schema:
            type: string
          description: Specific capability to search for
          example: "email"
        - name: category
          in: query
          schema:
            type: string
            enum: [communication, productivity, development, finance, social, storage, other]
          description: Server category filter
        - name: transport
          in: query
          schema:
            type: string
            enum: [streamable_http, sse, stdio]
          description: Required transport protocol
        - name: cors_required
          in: query
          schema:
            type: boolean
          description: Requires CORS support
        - name: ssl_required
          in: query
          schema:
            type: boolean
          description: Requires SSL/TLS
        - name: verified_only
          in: query
          schema:
            type: boolean
            default: false
          description: Only return verified servers
        - name: include_health
          in: query
          schema:
            type: boolean
            default: true
          description: Include health metrics
        - name: include_tools
          in: query
          schema:
            type: boolean
            default: true
          description: Include tools list
        - name: include_resources
          in: query
          schema:
            type: boolean
            default: false
          description: Include resources list
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Maximum number of results
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Number of results to skip

      responses:
        '200':
          description: Discovery results with transport capabilities
          content:
            application/json:
              schema:
                type: object
                properties:
                  servers:
                    type: array
                    items:
                      $ref: '#/components/schemas/MCPServerRecord'
                  total:
                    type: integer
                    description: Total number of matching servers
                  query_analysis:
                    type: object
                    description: Analysis of the search query
                  transport_summary:
                    type: object
                    description: Summary of transport capabilities in results
                    properties:
                      protocols:
                        type: object
                        description: Count by transport protocol
                      sse_support:
                        type: integer
                        description: Number of servers with SSE support
                      session_support:
                        type: integer
                        description: Number of servers with session support
                      cors_enabled:
                        type: integer
                        description: Number of servers with CORS enabled
              examples:
                discovery_response:
                  summary: Discovery response with transport capabilities
                  value:
                    servers:
                      - domain: "example.com"
                        endpoint: "https://api.example.com/mcp"
                        name: "Example MCP Server"
                        transport: "streamable_http"
                        transport_capabilities:
                          sse_support:
                            supports_sse: true
                            supports_get_streaming: true
                            supports_post_streaming: true
                          session_support:
                            supports_sessions: true
                            session_header_name: "Mcp-Session-Id"
                          cors_details:
                            cors_enabled: true
                            allowed_origins: ["*"]
                            allowed_methods: ["GET", "POST", "OPTIONS"]
                        openapi_documentation:
                          discovered_at: "2024-01-15T10:30:00Z"
                          spec_url: "https://api.example.com/openapi.json"
                          discovery_method: "endpoint_scan"
                          openapi_version: "3.0.3"
                          spec_format: "json"
                          api_info:
                            title: "Example API"
                            version: "1.0.0"
                            description: "RESTful API for file management"
                          endpoints_summary:
                            total_paths: 15
                            total_operations: 25
                            methods:
                              GET: 10
                              POST: 8
                              PUT: 4
                              DELETE: 3
                            tags: ["files", "auth", "users"]
                            has_authentication: true
                            auth_schemes: ["bearerAuth"]
                          validation:
                            is_valid: true
                            validation_errors: []
                    total: 1
                    transport_summary:
                      protocols:
                        streamable_http: 1
                      sse_support: 1
                      cors_enabled: 1
        '400':
          description: Invalid request parameters
        '429':
          description: Rate limit exceeded

  /register:
    post:
      tags: [Registration]
      summary: Register a new MCP server
      description: |
        Register a new MCP server with automatic transport capabilities discovery.

        **Enhanced Registration Process**:
        1. Validates MCP endpoint and protocol compliance
        2. Initiates DNS verification challenge
        3. **NEW**: Automatically discovers transport capabilities
        4. Creates complete server record with metadata
        5. Populates tools and resources

        The registration now includes comprehensive transport metadata discovery.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [domain, endpoint, contact_email]
              properties:
                domain:
                  type: string
                  description: Domain name (must match endpoint domain)
                  example: "api.example.com"
                endpoint:
                  type: string
                  format: uri
                  description: MCP endpoint URL
                  example: "https://api.example.com/mcp"
                contact_email:
                  type: string
                  format: email
                  description: Contact email for verification
                  example: "admin@example.com"
                description:
                  type: string
                  description: Optional server description
                  example: "File management and cloud storage tools"
      responses:
        '200':
          description: Registration initiated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  challenge_id:
                    type: string
                    description: DNS verification challenge ID
                  dns_record:
                    type: string
                    description: DNS TXT record to create
                  verification_token:
                    type: string
                    description: Verification token
                  instructions:
                    type: string
                    description: Verification instructions
                  expires_at:
                    type: string
                    format: date-time
                    description: Challenge expiration time
        '400':
          description: Invalid registration request
        '409':
          description: Server already registered
        '422':
          description: MCP endpoint validation failed

  /register/verify/{challengeId}:
    post:
      tags: [Registration]
      summary: Verify DNS challenge and complete registration
      description: |
        Verify DNS challenge and complete server registration with transport discovery.

        **Enhanced Verification**:
        - Verifies DNS TXT record
        - **NEW**: Discovers transport capabilities automatically
        - Creates complete server record with metadata
        - Populates tools and resources

        After successful verification, the server is fully registered with comprehensive
        transport capabilities metadata.
      parameters:
        - name: challengeId
          in: path
          required: true
          schema:
            type: string
          description: DNS verification challenge ID
      responses:
        '200':
          description: Verification successful, server registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  verified:
                    type: boolean
                    description: Verification status
                  server_record:
                    $ref: '#/components/schemas/MCPServerRecord'
                    description: Complete server record with transport capabilities
                  transport_discovery:
                    type: object
                    description: Transport discovery results
                    properties:
                      capabilities_discovered:
                        type: integer
                        description: Number of capabilities discovered
                      discovery_time_ms:
                        type: number
                        description: Time taken for discovery
                      methods_tested:
                        type: array
                        items:
                          type: string
                        description: HTTP methods tested
        '400':
          description: Invalid challenge ID
        '404':
          description: Challenge not found or expired
        '422':
          description: DNS verification failed

  /register/status/{challengeId}:
    get:
      tags: [Registration]
      summary: Get registration challenge status
      description: Check the status of a DNS verification challenge
      parameters:
        - name: challengeId
          in: path
          required: true
          schema:
            type: string
          description: DNS verification challenge ID
      responses:
        '200':
          description: Challenge status
          content:
            application/json:
              schema:
                type: object
                properties:
                  challenge_id:
                    type: string
                  status:
                    type: string
                    enum: [pending, verified, expired, failed]
                  created_at:
                    type: string
                    format: date-time
                  expires_at:
                    type: string
                    format: date-time
                  verified_at:
                    type: string
                    format: date-time
                  dns_record:
                    type: string
                    description: Required DNS TXT record
        '404':
          description: Challenge not found

  /discover/smart:
    post:
      tags: [Discovery]
      summary: Smart AI-powered discovery
      description: |
        Advanced discovery using AI to understand natural language queries and provide intelligent server recommendations.
        Uses a three-step process: keywords extraction ‚Üí search ‚Üí AI narrowing.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: string
                  description: Natural language query
                  example: "I need tools for managing customer emails and scheduling meetings"
                max_results:
                  type: integer
                  minimum: 1
                  maximum: 50
                  default: 10
                  description: Maximum number of results
                include_reasoning:
                  type: boolean
                  default: false
                  description: Include AI reasoning in response
      responses:
        '200':
          description: Smart discovery results
          content:
            application/json:
              schema:
                type: object
                properties:
                  servers:
                    type: array
                    items:
                      $ref: '#/components/schemas/MCPServerRecord'
                  total:
                    type: integer
                  query_analysis:
                    type: object
                    properties:
                      extracted_keywords:
                        type: array
                        items:
                          type: string
                      detected_capabilities:
                        type: array
                        items:
                          type: string
                      confidence_score:
                        type: number
                        minimum: 0
                        maximum: 1
                  ai_reasoning:
                    type: string
                    description: AI explanation of results (if requested)
        '400':
          description: Invalid request parameters
        '429':
          description: Rate limit exceeded

  /verify:
    post:
      tags: [Registration]
      summary: Start domain verification
      description: Start domain ownership verification for authenticated user
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [domain]
              properties:
                domain:
                  type: string
                  description: Domain to verify
                  example: "example.com"
      responses:
        '200':
          description: Verification challenge created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  challenge:
                    type: object
                    properties:
                      domain:
                        type: string
                      slug:
                        type: string
                      txtRecord:
                        type: string
                      instructions:
                        type: string
        '401':
          description: Authentication required
        '400':
          description: Invalid domain format
    get:
      tags: [Registration]
      summary: Get user's domain verifications
      description: Get all domain verifications for authenticated user
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User's domain verifications
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  verifications:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        domain:
                          type: string
                        status:
                          type: string
                          enum: [pending, verified, expired, failed]
                        created_at:
                          type: string
                          format: date-time
                        verified_at:
                          type: string
                          format: date-time
                        last_check_at:
                          type: string
                          format: date-time
                        expires_at:
                          type: string
                          format: date-time
                        failure_reason:
                          type: string
        '401':
          description: Authentication required

  /domain-check:
    get:
      tags: [Registration]
      summary: Check domain ownership
      description: Check if authenticated user can register MCP servers for a domain
      security:
        - BearerAuth: []
      parameters:
        - name: domain
          in: query
          required: true
          schema:
            type: string
          description: Domain to check
          example: "example.com"
      responses:
        '200':
          description: Domain ownership status
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  domain:
                    type: string
                  user_id:
                    type: string
                  can_register:
                    type: boolean
                  verified:
                    type: boolean
                  message:
                    type: string
                  action_required:
                    type: string
                  verification_url:
                    type: string
        '401':
          description: Authentication required
        '400':
          description: Invalid domain format

  /health/{domain}:
    get:
      tags: [Health]
      summary: Get server health metrics
      description: Get real-time or cached health metrics for a specific MCP server
      parameters:
        - name: domain
          in: path
          required: true
          schema:
            type: string
          description: Server domain
          example: "example.com"
        - name: realtime
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: Perform real-time health check
      responses:
        '200':
          description: Server health metrics
          content:
            application/json:
              schema:
                type: object
                properties:
                  domain:
                    type: string
                  endpoint:
                    type: string
                  health:
                    $ref: '#/components/schemas/HealthMetrics'
                  capabilities_working:
                    type: boolean
                  ssl_valid:
                    type: boolean
                  trust_score:
                    type: integer
                    minimum: 0
                    maximum: 100
        '404':
          description: Server not found
        '500':
          description: Health check failed

  /onboarding:
    get:
      tags: [User Management]
      summary: Get user onboarding state
      description: Get the current onboarding progress for authenticated user
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User onboarding state
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  onboarding:
                    type: object
                    properties:
                      current_step:
                        type: string
                        enum: [welcome, domain_verify, server_register, dashboard_tour, training_impact, completed]
                      progress:
                        type: number
                        minimum: 0
                        maximum: 100
                      completed_steps:
                        type: array
                        items:
                          type: string
                      needs_onboarding:
                        type: boolean
        '401':
          description: Authentication required
    post:
      tags: [User Management]
      summary: Update onboarding progress
      description: Update the user's onboarding step progress
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [step]
              properties:
                step:
                  type: string
                  enum: [welcome, domain_verify, server_register, dashboard_tour, training_impact, completed]
                completed:
                  type: boolean
                  default: false
      responses:
        '200':
          description: Onboarding progress updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '401':
          description: Authentication required
        '400':
          description: Invalid step or request data

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Optional API key for enhanced features

  schemas:
    TransportCapabilities:
      type: object
      description: Detailed transport capabilities discovered during verification
      properties:
        primary_transport:
          type: string
          enum: [streamable_http, sse, stdio]
          description: Primary transport protocol
        supported_methods:
          type: array
          items:
            type: string
          description: Supported HTTP methods
          example: [GET, POST, OPTIONS]
        content_types:
          type: array
          items:
            type: string
          description: Supported content types
          example: [application/json, text/event-stream]
        sse_support:
          type: object
          description: Server-Sent Events capabilities
          properties:
            supports_sse:
              type: boolean
              description: Supports SSE streaming
            supports_get_streaming:
              type: boolean
              description: Supports GET streaming
            supports_post_streaming:
              type: boolean
              description: Supports POST streaming
        session_support:
          type: object
          description: Session management capabilities
          properties:
            supports_sessions:
              type: boolean
              description: Supports session management
            session_header_name:
              type: string
              description: Session header name
            session_timeout_indicated:
              type: boolean
              description: Indicates session timeout
        resumability:
          type: object
          description: Stream resumability capabilities
          properties:
            supports_event_ids:
              type: boolean
              description: Supports event IDs
            supports_last_event_id:
              type: boolean
              description: Supports Last-Event-ID header
            event_id_format:
              type: string
              description: Event ID format pattern
        connection_limits:
          type: object
          description: Connection limit information
          properties:
            supports_multiple_connections:
              type: boolean
              description: Supports multiple connections
            max_concurrent_connections:
              type: integer
              description: Maximum concurrent connections
        security_features:
          type: object
          description: Security feature detection
          properties:
            origin_validation:
              type: boolean
              description: Validates request origins
            ssl_required:
              type: boolean
              description: Requires SSL/TLS
            custom_auth_headers:
              type: array
              items:
                type: string
              description: Custom authentication headers
        performance:
          type: object
          description: Performance characteristics
          properties:
            avg_response_time_ms:
              type: number
              description: Average response time in milliseconds
            streaming_latency_ms:
              type: number
              description: Streaming latency in milliseconds
            supports_compression:
              type: boolean
              description: Supports response compression
            max_message_size:
              type: integer
              description: Maximum message size in bytes
        cors_details:
          type: object
          description: CORS configuration details
          properties:
            cors_enabled:
              type: boolean
              description: CORS is enabled
            allowed_origins:
              type: array
              items:
                type: string
              description: Allowed origins
            allowed_methods:
              type: array
              items:
                type: string
              description: Allowed HTTP methods
            allowed_headers:
              type: array
              items:
                type: string
              description: Allowed headers
            supports_credentials:
              type: boolean
              description: Supports credentials
        rate_limits:
          type: object
          description: Rate limiting information
          properties:
            requests_per_minute:
              type: integer
              description: Requests per minute limit
            burst_limit:
              type: integer
              description: Burst request limit
            rate_limit_headers:
              type: array
              items:
                type: string
              description: Rate limit header names

    MCPServerRecord:
      type: object
      description: Complete MCP server record with all metadata
      properties:
        domain:
          type: string
          description: Server domain
        endpoint:
          type: string
          format: uri
          description: MCP endpoint URL
        name:
          type: string
          description: Server display name
        description:
          type: string
          description: Server description
        server_info:
          $ref: '#/components/schemas/MCPServerInfo'
        tools:
          type: array
          items:
            $ref: '#/components/schemas/MCPTool'
          description: Available tools
        resources:
          type: array
          items:
            $ref: '#/components/schemas/MCPResource'
          description: Available resources
        transport:
          type: string
          enum: [streamable_http, sse, stdio]
          description: Primary transport protocol
        transport_capabilities:
          $ref: '#/components/schemas/TransportCapabilities'
          description: Detailed transport capabilities
        openapi_documentation:
          $ref: '#/components/schemas/OpenAPIDocumentation'
          description: OpenAPI/Swagger documentation exposed by the server
        cors_enabled:
          type: boolean
          description: CORS enabled
        health:
          $ref: '#/components/schemas/HealthMetrics'
        verification:
          $ref: '#/components/schemas/Verification'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        trust_score:
          type: integer
          minimum: 0
          maximum: 100
          description: Trust score (0-100)

    MCPServerInfo:
      type: object
      description: MCP server information from initialize response
      properties:
        name:
          type: string
          description: Server name
        version:
          type: string
          description: Server version
        protocolVersion:
          type: string
          description: Supported MCP protocol version
        capabilities:
          type: object
          description: Server capabilities
          properties:
            tools:
              type: boolean
              description: Supports tools
            resources:
              type: boolean
              description: Supports resources
            prompts:
              type: boolean
              description: Supports prompts
            logging:
              type: boolean
              description: Supports logging

    MCPTool:
      type: object
      description: MCP tool definition
      properties:
        name:
          type: string
          description: Tool name
        description:
          type: string
          description: Tool description
        inputSchema:
          type: object
          description: JSON Schema for tool input parameters

    MCPResource:
      type: object
      description: MCP resource definition
      properties:
        uri:
          type: string
          description: Resource URI
        name:
          type: string
          description: Resource name
        description:
          type: string
          description: Resource description
        mimeType:
          type: string
          description: Resource MIME type

    HealthMetrics:
      type: object
      description: Server health and performance metrics
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy, unknown]
          description: Current health status
        uptime_percentage:
          type: number
          description: Uptime percentage (0-100)
        avg_response_time_ms:
          type: number
          description: Average response time in milliseconds
        error_rate:
          type: number
          description: Error rate (0-1)
        last_check:
          type: string
          format: date-time
          description: Last health check timestamp
        consecutive_failures:
          type: integer
          description: Consecutive failure count

    Verification:
      type: object
      description: Server verification status
      properties:
        dns_verified:
          type: boolean
          description: DNS ownership verified
        endpoint_verified:
          type: boolean
          description: MCP endpoint verified
        ssl_verified:
          type: boolean
          description: SSL certificate verified
        last_verification:
          type: string
          format: date-time
          description: Last verification timestamp
        verification_method:
          type: string
          description: Verification method used
        verified_at:
          type: string
          format: date-time
          description: Initial verification timestamp

    OpenAPIDocumentation:
      type: object
      description: OpenAPI/Swagger documentation exposed by MCP servers
      properties:
        discovered_at:
          type: string
          format: date-time
          description: When the OpenAPI spec was discovered
        spec_url:
          type: string
          format: uri
          description: URL where the OpenAPI spec was found
        discovery_method:
          type: string
          enum: [endpoint_scan, manual, header_hint, well_known]
          description: How the spec was discovered
        openapi_version:
          type: string
          description: OpenAPI specification version
          example: "3.0.3"
        spec_format:
          type: string
          enum: [json, yaml]
          description: Format of the specification
        api_info:
          type: object
          description: API information from OpenAPI spec
          properties:
            title:
              type: string
              description: API title
            version:
              type: string
              description: API version
            description:
              type: string
              description: API description
            contact:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                url:
                  type: string
                  format: uri
            license:
              type: object
              properties:
                name:
                  type: string
                url:
                  type: string
                  format: uri
        servers:
          type: array
          items:
            type: object
            properties:
              url:
                type: string
                description: Server URL
              description:
                type: string
                description: Server description
              variables:
                type: object
                description: Server variables
          description: Server definitions from OpenAPI spec
        endpoints_summary:
          type: object
          description: Summary of API endpoints and operations
          properties:
            total_paths:
              type: integer
              description: Total number of API paths
            total_operations:
              type: integer
              description: Total number of operations
            methods:
              type: object
              additionalProperties:
                type: integer
              description: Count by HTTP method
              example:
                GET: 10
                POST: 5
                PUT: 3
            tags:
              type: array
              items:
                type: string
              description: Available tags
            has_authentication:
              type: boolean
              description: Whether API requires authentication
            auth_schemes:
              type: array
              items:
                type: string
              description: Authentication scheme types
        spec_hash:
          type: string
          description: Hash of the specification for change detection
        validation:
          type: object
          description: OpenAPI specification validation status
          properties:
            is_valid:
              type: boolean
              description: Whether the OpenAPI spec is valid
            validation_errors:
              type: array
              items:
                type: string
              description: Validation error messages
            last_validated:
              type: string
              format: date-time
              description: Last validation timestamp
