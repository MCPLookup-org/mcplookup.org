"use strict";exports.id=116,exports.ids=[116],exports.modules={13121:(e,t,i)=>{i.r(t),i.d(t,{InMemoryVerificationStorage:()=>o,MCPValidationService:()=>c,VerificationService:()=>n});var a=i(35672),r=i.n(a),s=i(55511);class n{constructor(e,t){this.DNS_RESOLVERS=["1.1.1.1","8.8.8.8","9.9.9.9","208.67.222.222"],this.VERIFICATION_PREFIX="_mcp-verify",this.TOKEN_TTL_HOURS=24,this.storageService=e,this.mcpService=t}async initiateDNSVerification(e){let t=(0,s.randomUUID)(),i=this.generateSecureToken(),a=new Date(Date.now()+60*this.TOKEN_TTL_HOURS*6e4),r=`${this.VERIFICATION_PREFIX}.${e.domain}`,n=await this.generateVerificationRecord(e.domain,i),o={challenge_id:t,domain:e.domain,txt_record_name:r,txt_record_value:n,expires_at:a.toISOString(),instructions:this.generateInstructions(r,n,e.domain)};return await this.storageService.storeChallenge(t,{...o,endpoint:e.endpoint,contact_email:e.contact_email,token:i,created_at:new Date().toISOString()}),o}async verifyDNSChallenge(e){let t=await this.storageService.getChallenge(e);if(!t)throw Error("Challenge not found or expired");if(new Date>new Date(t.expires_at))throw await this.storageService.deleteChallenge(e),Error("Challenge has expired");try{if((await Promise.allSettled(this.DNS_RESOLVERS.map(e=>this.verifyDNSRecordWithResolver(t.txt_record_name,t.txt_record_value,e)))).filter(e=>"fulfilled"===e.status&&e.value).length>this.DNS_RESOLVERS.length/2){if(await this.verifyMCPEndpoint(t.endpoint))return await this.storageService.markChallengeVerified(e),!0;throw Error("MCP endpoint verification failed")}return!1}catch(e){return console.error("DNS verification error:",e),!1}}async verifyMCPEndpoint(e){try{return await this.mcpService.validateMCPEndpoint(e)}catch(e){return console.error("MCP endpoint validation failed:",e),!1}}async generateVerificationRecord(e,t){let i=Math.floor(Date.now()/1e3);return`v=mcp1 domain=${e} token=${t} timestamp=${i}`}generateSecureToken(){let e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",t="";for(let i=0;i<32;i++)t+=e.charAt(Math.floor(Math.random()*e.length));return t}async verifyDNSRecordWithResolver(e,t,i){try{for(let a of(r().setServers([i]),await r().resolveTxt(e)))if((Array.isArray(a)?a.join(""):a)===t)return!0;return!1}catch(e){return console.error(`DNS verification failed with resolver ${i}:`,e),!1}}generateInstructions(e,t,i){return`
To verify ownership of ${i}, please add the following DNS TXT record:

Record Type: TXT
Name: ${e}
Value: ${t}

Instructions by DNS provider:

CLOUDFLARE:
1. Log into your Cloudflare dashboard
2. Select your domain (${i})
3. Go to DNS settings
4. Click "Add record"
5. Type: TXT
6. Name: ${e}
7. Content: ${t}
8. Click "Save"

NAMECHEAP:
1. Log into your Namecheap account
2. Go to Domain List
3. Click "Manage" next to ${i}
4. Go to "Advanced DNS" tab
5. Click "Add New Record"
6. Type: TXT Record
7. Host: ${this.VERIFICATION_PREFIX}
8. Value: ${t}
9. Click the checkmark to save

GODADDY:
1. Log into your GoDaddy account
2. Go to DNS Management for ${i}
3. Click "Add" in the Records section
4. Type: TXT
5. Name: ${this.VERIFICATION_PREFIX}
6. Value: ${t}
7. Click "Save"

After adding the record, it may take up to 48 hours to propagate globally.
You can check propagation status at: https://dnschecker.org

Once the record is active, click "Verify" to complete the process.
    `.trim()}}class o{async storeChallenge(e,t){this.challenges.set(e,t),setTimeout(()=>{this.challenges.delete(e)},864e5)}async getChallenge(e){return this.challenges.get(e)||null}async deleteChallenge(e){this.challenges.delete(e)}async markChallengeVerified(e){let t=this.challenges.get(e);t&&(t.verified_at=new Date().toISOString(),this.challenges.set(e,t))}async getVerifiedDomains(){let e=[];for(let t of this.challenges.values())t.verified_at&&e.push(t.domain);return[...new Set(e)]}constructor(){this.challenges=new Map}}class c{async validateMCPEndpoint(e){try{if(!await this.testMCPConnection(e))return!1;let t=await this.getMCPServerInfo(e);return null!==t}catch(e){return console.error("MCP validation error:",e),!1}}async getMCPServerInfo(e){try{let t=await fetch(e,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({jsonrpc:"2.0",id:1,method:"initialize",params:{protocolVersion:"2024-11-05",capabilities:{},clientInfo:{name:"mcplookup-verifier",version:"1.0.0"}}}),signal:AbortSignal.timeout(this.TIMEOUT_MS)});if(!t.ok)return null;return(await t.json()).result||null}catch(e){return console.error("MCP server info fetch failed:",e),null}}async testMCPConnection(e){try{return(await fetch(e,{method:"GET",signal:AbortSignal.timeout(this.TIMEOUT_MS)})).status<500}catch(e){return console.error("MCP connection test failed:",e),!1}}constructor(){this.TIMEOUT_MS=1e4}}},57116:(e,t,i)=>{i.d(t,{lI:()=>u,getServerlessServices:()=>d});class a{constructor(){this.cache=new Map,this.cacheExpiry=new Map,this.CACHE_TTL_MS=3e5,this.initializeWellKnownServers()}async getServersByDomain(e){let t=`domain:${e}`,i=this.getCachedResult(t);if(i)return i;let a=await this.discoverWellKnownEndpoint(e);return this.setCachedResult(t,a),a}async getServersByCapability(e){let t=`capability:${e}`,i=this.getCachedResult(t);if(i)return i;let a=(await this.getAllVerifiedServers()).filter(t=>t.capabilities.subcategories.some(t=>t.toLowerCase().includes(e.toLowerCase()))||t.capabilities.category===e);return this.setCachedResult(t,a),a}async getServersByCategory(e){let t=`category:${e}`,i=this.getCachedResult(t);if(i)return i;let a=(await this.getAllVerifiedServers()).filter(t=>t.capabilities.category===e);return this.setCachedResult(t,a),a}async searchServers(e){let t=`search:${e.join(",")}`,i=this.getCachedResult(t);if(i)return i;let a=await this.getAllVerifiedServers(),r=e.map(e=>e.toLowerCase()),s=a.filter(e=>{let t=[e.name,e.description,...e.capabilities.subcategories,...e.capabilities.use_cases].join(" ").toLowerCase();return r.some(e=>t.includes(e))});return this.setCachedResult(t,s),s}async getAllVerifiedServers(){let e="all_verified",t=this.getCachedResult(e);if(t)return t;let i=this.getWellKnownServers();return this.setCachedResult(e,i),i}async getRelatedCapabilities(e){let t=e.toLowerCase();for(let[e,i]of Object.entries({email:["email_send","email_read","email_compose","gmail","outlook"],calendar:["calendar_create","calendar_read","calendar_update","scheduling"],file:["file_read","file_write","file_upload","storage","drive"],database:["db_query","db_write","sql","nosql","postgres"],api:["rest_api","graphql","webhook","http_request"],ai:["llm","embedding","completion","chat","openai"],social:["twitter","linkedin","facebook","social_media"],payment:["stripe","paypal","payment_processing","billing"],analytics:["google_analytics","tracking","metrics","reporting"]}))if(t.includes(e)||i.some(e=>t.includes(e)))return i;return[]}getCachedResult(e){let t=this.cacheExpiry.get(e);return!t||Date.now()>t?(this.cache.delete(e),this.cacheExpiry.delete(e),null):this.cache.get(e)||null}setCachedResult(e,t){this.cache.set(e,t),this.cacheExpiry.set(e,Date.now()+this.CACHE_TTL_MS)}async discoverWellKnownEndpoint(e){for(let t of[`https://${e}/.well-known/mcp-server`,`https://${e}/api/mcp`,`https://${e}/mcp`,`https://api.${e}/mcp`])try{let i=await fetch(t,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({jsonrpc:"2.0",id:1,method:"initialize",params:{protocolVersion:"2024-11-05",capabilities:{},clientInfo:{name:"mcplookup-discovery",version:"1.0.0"}}})});if(i.ok){let a=await i.json();if(a.result&&a.result.serverInfo)return[this.createServerRecordFromEndpoint(e,t,a.result)]}}catch{}return[]}createServerRecordFromEndpoint(e,t,i){return{domain:e,endpoint:t,name:i.serverInfo?.name||`${e} MCP Server`,description:`MCP server for ${e}`,server_info:{name:i.serverInfo?.name||"unknown",version:i.serverInfo?.version||"1.0.0",protocolVersion:i.protocolVersion||"2024-11-05",capabilities:i.capabilities||{tools:!0,resources:!1}},tools:[],resources:[],transport:"streamable_http",capabilities:{category:"other",subcategories:["general"],intent_keywords:["general","api"],use_cases:["General purpose MCP server"]},auth:{type:"none"},cors_enabled:!0,health:{status:"healthy",uptime_percentage:99,avg_response_time_ms:100,error_rate:.01,last_check:new Date().toISOString(),consecutive_failures:0},verification:{dns_verified:!1,endpoint_verified:!0,ssl_verified:!0,last_verification:new Date().toISOString(),verification_method:"endpoint-check"},created_at:new Date().toISOString(),updated_at:new Date().toISOString(),maintainer:{name:e,url:`https://${e}`}}}initializeWellKnownServers(){let e=this.getWellKnownServers();this.setCachedResult("all_verified",e)}getWellKnownServers(){return[{domain:"gmail.com",endpoint:"https://gmail.com/api/mcp",name:"Gmail MCP Server",description:"Access and manage Gmail emails, compose messages, and handle attachments",server_info:{name:"gmail-mcp",version:"2.1.0",protocolVersion:"2024-11-05",capabilities:{tools:!0,resources:!0}},tools:[],resources:[],transport:"streamable_http",capabilities:{category:"communication",subcategories:["email_send","email_read","email_compose","email_search","attachment_download"],intent_keywords:["email","gmail","send","inbox","compose"],use_cases:["Send emails","Read inbox","Manage attachments","Email automation"]},auth:{type:"oauth2",oauth2:{authorizationUrl:"https://accounts.google.com/oauth2/auth",tokenUrl:"https://oauth2.googleapis.com/token",scopes:["https://www.googleapis.com/auth/gmail.modify"]}},cors_enabled:!0,health:{status:"healthy",uptime_percentage:99.97,avg_response_time_ms:45,error_rate:.001,last_check:"2025-01-03T10:00:00Z",consecutive_failures:0},verification:{dns_verified:!0,endpoint_verified:!0,ssl_verified:!0,last_verification:"2025-01-01T00:00:00Z",verification_method:"dns-txt-challenge"},created_at:"2025-01-01T00:00:00Z",updated_at:"2025-01-03T09:00:00Z",maintainer:{name:"Google",email:"mcp-support@gmail.com",url:"https://developers.google.com/gmail/mcp"}},{domain:"github.com",endpoint:"https://api.github.com/mcp",name:"GitHub MCP Server",description:"Interact with GitHub repositories, issues, pull requests, and workflows",server_info:{name:"github-mcp",version:"1.8.0",protocolVersion:"2024-11-05",capabilities:{tools:!0,resources:!0}},tools:[],resources:[],transport:"streamable_http",capabilities:{category:"development",subcategories:["repo_create","issue_create","pr_create","file_read","commit_create"],intent_keywords:["github","repository","code","git","issue"],use_cases:["Repository management","Issue tracking","Code collaboration","CI/CD automation"]},auth:{type:"oauth2",oauth2:{authorizationUrl:"https://github.com/login/oauth/authorize",tokenUrl:"https://github.com/login/oauth/access_token",scopes:["repo","user"]}},cors_enabled:!0,health:{status:"healthy",uptime_percentage:99.95,avg_response_time_ms:120,error_rate:.002,last_check:"2025-01-03T10:00:00Z",consecutive_failures:0},verification:{dns_verified:!0,endpoint_verified:!0,ssl_verified:!0,last_verification:"2025-01-01T00:00:00Z",verification_method:"dns-txt-challenge"},created_at:"2025-01-01T00:00:00Z",updated_at:"2025-01-03T09:00:00Z",maintainer:{name:"GitHub",email:"mcp@github.com",url:"https://docs.github.com/mcp"}}]}}class r{async checkServerHealth(e){let t=Date.now();try{let i=await this.performHealthCheck(e),a=Date.now()-t;if(i.success)return{status:"healthy",uptime_percentage:99,avg_response_time_ms:a,error_rate:.01,last_check:new Date().toISOString(),consecutive_failures:0};return{status:"degraded",uptime_percentage:95,avg_response_time_ms:a,error_rate:.05,last_check:new Date().toISOString(),consecutive_failures:1}}catch(e){return{status:"down",uptime_percentage:90,avg_response_time_ms:Date.now()-t,error_rate:.1,last_check:new Date().toISOString(),consecutive_failures:5}}}async batchHealthCheck(e){let t=new Map;for(let i=0;i<e.length;i+=this.MAX_CONCURRENT_CHECKS){let a=e.slice(i,i+this.MAX_CONCURRENT_CHECKS).map(async e=>{try{let t=await this.checkServerHealth(e);return{endpoint:e,health:t}}catch(t){return{endpoint:e,health:{status:"unknown",uptime_percentage:0,avg_response_time_ms:0,error_rate:1,last_check:new Date().toISOString(),consecutive_failures:10}}}});(await Promise.all(a)).forEach(({endpoint:e,health:i})=>{t.set(e,i)})}return t}async performHealthCheck(e){let t=new AbortController,i=setTimeout(()=>t.abort(),this.HEALTH_CHECK_TIMEOUT_MS);try{let a=await fetch(e,{method:"POST",headers:{"Content-Type":"application/json","User-Agent":"MCPLookup-HealthChecker/1.0"},body:JSON.stringify({jsonrpc:"2.0",id:`health-check-${Date.now()}`,method:"initialize",params:{protocolVersion:"2024-11-05",capabilities:{},clientInfo:{name:"mcplookup-health-checker",version:"1.0.0"}}}),signal:t.signal});if(clearTimeout(i),!a.ok)return{success:!1};let r=await a.json();if("2.0"===r.jsonrpc&&r.result)return{success:!0,data:r};return{success:!1}}catch(e){if(clearTimeout(i),e instanceof Error&&"AbortError"===e.name)throw Error("Health check timeout");throw e}}calculateHealthStatus(e,t){return t>.1?"down":t>.05||e>5e3?"degraded":"healthy"}estimateUptimePercentage(e){switch(e){case"healthy":return 99+.99*Math.random();case"degraded":return 95+4*Math.random();case"down":return 80+15*Math.random();case"unknown":return 0;default:return 90}}estimateErrorRate(e){switch(e){case"healthy":return .01*Math.random();case"degraded":return .01+.04*Math.random();case"down":return .1+.9*Math.random();case"unknown":return 1;default:return .05}}constructor(){this.HEALTH_CHECK_TIMEOUT_MS=1e4,this.MAX_CONCURRENT_CHECKS=10}}class s extends r{async checkServerHealth(e){let t=await super.checkServerHealth(e);return this.storeHealthHistory(e,t),this.calculateEnhancedMetrics(e,t)}storeHealthHistory(e,t){this.healthHistory.has(e)||this.healthHistory.set(e,[]);let i=this.healthHistory.get(e);i.push(t),i.length>this.MAX_HISTORY_ENTRIES&&i.shift()}calculateEnhancedMetrics(e,t){let i=this.healthHistory.get(e)||[];if(i.length<2)return t;let a=i.reduce((e,t)=>e+t.avg_response_time_ms,0)/i.length,r=i.filter(e=>"healthy"===e.status).length/i.length*100,s=i.reduce((e,t)=>e+t.error_rate,0)/i.length,n=0;for(let e=i.length-1;e>=0;e--)if("down"===i[e].status||"degraded"===i[e].status)n++;else break;return{...t,uptime_percentage:r,avg_response_time_ms:a,error_rate:s,consecutive_failures:n}}constructor(...e){super(...e),this.healthHistory=new Map,this.MAX_HISTORY_ENTRIES=100}}class n{constructor(){this.intentPatterns=new Map,this.capabilityAliases=new Map,this.initializeIntentPatterns(),this.initializeCapabilityAliases()}async intentToCapabilities(e){let t=this.normalizeIntent(e),i=new Set;for(let[e,a]of this.intentPatterns.entries())a.some(e=>t.includes(e))&&(i.add(e),(this.capabilityAliases.get(e)||[]).forEach(e=>i.add(e)));return 0===i.size&&this.extractCapabilitiesFromKeywords(t).forEach(e=>i.add(e)),Array.from(i)}async getSimilarIntents(e){let t=this.normalizeIntent(e),i=[];for(let[e,a]of this.intentPatterns.entries())for(let r of a)this.calculateSimilarity(t,r)>.6&&i.push(this.generateIntentSuggestion(e,r));return i.slice(0,5)}normalizeIntent(e){return e.toLowerCase().replace(/[^\w\s]/g," ").replace(/\s+/g," ").trim()}extractCapabilitiesFromKeywords(e){let t=e.split(" "),i=[],a={email:["email_send","email_read"],mail:["email_send","email_read"],message:["email_send","messaging"],calendar:["calendar_create","calendar_read"],schedule:["calendar_create","scheduling"],file:["file_read","file_write"],document:["file_read","file_write"],database:["db_query","db_write"],data:["db_query","data_analysis"],api:["rest_api","http_request"],github:["repo_create","issue_create"],git:["repo_create","version_control"],payment:["payment_processing","billing"],analytics:["analytics","tracking"],social:["social_media","posting"],ai:["llm","completion"],chat:["chat","messaging"]};return t.forEach(e=>{let t=a[e];t&&i.push(...t)}),i}calculateSimilarity(e,t){let i=e.split(" "),a=t.split(" "),r=i.filter(e=>a.includes(e)),s=new Set([...i,...a]).size;return r.length/s}generateIntentSuggestion(e,t){return({email_send:"Send an email",email_read:"Read my emails",calendar_create:"Create a calendar event",file_read:"Read a file",db_query:"Query the database",rest_api:"Make an API call",repo_create:"Create a repository"})[e]||`Use ${e}`}initializeIntentPatterns(){this.intentPatterns.set("email_send",["send email","send mail","compose email","write email","email someone","send message","mail to","compose mail"]),this.intentPatterns.set("email_read",["read email","check email","read mail","check mail","inbox","read messages","check messages","view emails"]),this.intentPatterns.set("calendar_create",["create event","schedule meeting","add calendar","book appointment","create appointment","schedule event","add meeting","calendar entry"]),this.intentPatterns.set("calendar_read",["check calendar","view calendar","see schedule","check schedule","calendar events","upcoming meetings","my schedule"]),this.intentPatterns.set("file_read",["read file","open file","view file","get file","download file","access file","file content"]),this.intentPatterns.set("file_write",["write file","save file","create file","upload file","store file","edit file","modify file"]),this.intentPatterns.set("db_query",["query database","search database","find data","get data","database search","sql query","data lookup"]),this.intentPatterns.set("db_write",["insert data","update database","save data","store data","database insert","database update","write database"]),this.intentPatterns.set("rest_api",["api call","http request","rest call","web request","api request","call api","fetch data"]),this.intentPatterns.set("repo_create",["create repository","new repo","create repo","github repo","git repository","new project","create project"]),this.intentPatterns.set("issue_create",["create issue","new issue","report bug","github issue","create ticket","bug report","feature request"]),this.intentPatterns.set("payment_processing",["process payment","charge card","payment","billing","stripe payment","paypal payment","checkout"]),this.intentPatterns.set("analytics",["track event","analytics","metrics","tracking","google analytics","page view","user tracking"]),this.intentPatterns.set("social_media",["post tweet","social media","twitter post","linkedin post","facebook post","social post","share content"]),this.intentPatterns.set("llm",["ai completion","generate text","ai chat","openai","gpt","language model","ai response"])}initializeCapabilityAliases(){this.capabilityAliases.set("email_send",["email_compose","messaging"]),this.capabilityAliases.set("email_read",["email_search","inbox_read"]),this.capabilityAliases.set("calendar_create",["scheduling","event_create"]),this.capabilityAliases.set("calendar_read",["schedule_read","event_read"]),this.capabilityAliases.set("file_read",["file_download","file_access"]),this.capabilityAliases.set("file_write",["file_upload","file_save"]),this.capabilityAliases.set("db_query",["data_read","sql_select"]),this.capabilityAliases.set("db_write",["data_write","sql_insert"]),this.capabilityAliases.set("rest_api",["http_request","web_api"]),this.capabilityAliases.set("repo_create",["git_init","project_create"]),this.capabilityAliases.set("issue_create",["ticket_create","bug_report"]),this.capabilityAliases.set("payment_processing",["billing","checkout"]),this.capabilityAliases.set("analytics",["tracking","metrics"]),this.capabilityAliases.set("social_media",["social_post","content_share"]),this.capabilityAliases.set("llm",["ai_completion","text_generation"])}}class o extends n{async intentToCapabilities(e){return this.USE_EXTERNAL_AI?await this.aiBasedIntentMatching(e):await super.intentToCapabilities(e)}async aiBasedIntentMatching(e){return await super.intentToCapabilities(e)}constructor(...e){super(...e),this.USE_EXTERNAL_AI=!1}}var c=i(13121);class l{constructor(e,t,i){this.registryService=e,this.healthService=t,this.intentService=i}async discoverServers(e){let t=Date.now(),i=[];try{let a=await this.getBaseServerList(e,i);a=await this.applySemanticFilters(a,e,i),a=this.applyTechnicalFilters(a,e,i),e.include_health&&(a=await this.applyHealthFilters(a,e,i));let r=(a=this.sortResults(a,e.sort_by||"relevance")).length,s=e.offset||0,n=e.limit||10,o=a.slice(s,s+n),c=await this.enhanceResults(o,e),l=Date.now()-t;return{servers:c,pagination:{total_count:r,returned_count:c.length,offset:s,has_more:s+n<r},query_metadata:{query_time_ms:l,cache_hit:!1,filters_applied:i},suggestions:0===r?await this.generateSuggestions(e):void 0}}catch(e){throw Error(`Discovery failed: ${e instanceof Error?e.message:"Unknown error"}`)}}async discoverByDomain(e){let t=await this.registryService.getServersByDomain(e);return t.length>0?t[0]:null}async discoverByIntent(e){let t=await this.intentService.intentToCapabilities(e),i=[];for(let e of t){let t=await this.discoverByCapability(e);i.push(...t)}return this.deduplicateServers(i)}async discoverByCapability(e){return await this.registryService.getServersByCapability(e)}async getBaseServerList(e,t){return e.domain?(t.push("domain_exact"),await this.registryService.getServersByDomain(e.domain)):e.capability?(t.push("capability_exact"),await this.registryService.getServersByCapability(e.capability)):e.category?(t.push("category_filter"),await this.registryService.getServersByCategory(e.category)):e.intent?(t.push("intent_matching"),await this.discoverByIntent(e.intent)):e.keywords&&e.keywords.length>0?(t.push("keyword_search"),await this.registryService.searchServers(e.keywords)):(t.push("all_verified"),await this.registryService.getAllVerifiedServers())}async applySemanticFilters(e,t,i){let a=e;return t.use_case&&(i.push("use_case_match"),a=a.filter(e=>e.capabilities.use_cases.some(e=>e.toLowerCase().includes(t.use_case.toLowerCase())))),a}applyTechnicalFilters(e,t,i){let a=e;return t.auth_types&&t.auth_types.length>0&&(i.push("auth_type_filter"),a=a.filter(e=>t.auth_types.includes(e.auth.type))),t.transport&&(i.push("transport_filter"),a=a.filter(e=>e.transport===t.transport)),t.cors_required&&(i.push("cors_required"),a=a.filter(e=>e.cors_enabled)),a}async applyHealthFilters(e,t,i){let a=e;return void 0!==t.min_uptime&&(i.push("min_uptime_filter"),a=a.filter(e=>e.health.uptime_percentage>=t.min_uptime)),void 0!==t.max_response_time&&(i.push("max_response_time_filter"),a=a.filter(e=>e.health.avg_response_time_ms<=t.max_response_time)),i.push("health_status_filter"),a=a.filter(e=>"down"!==e.health.status)}sortResults(e,t){switch(t){case"uptime":return e.sort((e,t)=>t.health.uptime_percentage-e.health.uptime_percentage);case"response_time":return e.sort((e,t)=>e.health.avg_response_time_ms-t.health.avg_response_time_ms);case"created_at":return e.sort((e,t)=>new Date(t.created_at).getTime()-new Date(e.created_at).getTime());default:return e.sort((e,t)=>{let i=2*!!e.verification.dns_verified+ +("healthy"===e.health.status);return 2*!!t.verification.dns_verified+ +("healthy"===t.health.status)-i})}}async enhanceResults(e,t){if(t.include_health){let t=e.map(async e=>{try{let t=await this.healthService.checkServerHealth(e.endpoint);return{...e,health:t}}catch{return e}});return await Promise.all(t)}return e}deduplicateServers(e){let t=new Set;return e.filter(e=>!t.has(e.domain)&&(t.add(e.domain),!0))}async generateSuggestions(e){let t=[];if(e.intent){let i=await this.intentService.getSimilarIntents(e.intent);t.push(...i.map(e=>`Try: "${e}"`))}if(e.capability){let i=await this.registryService.getRelatedCapabilities(e.capability);t.push(...i.map(e=>`Try capability: "${e}"`))}return e.category&&t.push("Try other categories: communication, productivity, data"),t.slice(0,3)}}class h{constructor(e={}){this.config={enhanced:!1,cacheEnabled:!0,healthCheckInterval:3e5,intentAIEnabled:!1,...e}}static getInstance(e){return h.instance||(h.instance=new h(e)),h.instance}getRegistryService(){return this.registryService||(this.registryService=new a),this.registryService}getHealthService(){return this.healthService||(this.healthService=this.config.enhanced?new s:new r),this.healthService}getIntentService(){return this.intentService||(this.intentService=this.config.enhanced||this.config.intentAIEnabled?new o:new n),this.intentService}getVerificationService(){if(!this.verificationService){let{InMemoryVerificationStorage:e,MCPValidationService:t}=i(13121),a=new e,r=new t;this.verificationService=new c.VerificationService(a,r)}return this.verificationService}getDiscoveryService(){return this.discoveryService||(this.discoveryService=new l(this.getRegistryService(),this.getHealthService(),this.getIntentService())),this.discoveryService}getAllServices(){return{registry:this.getRegistryService(),health:this.getHealthService(),intent:this.getIntentService(),verification:this.getVerificationService(),discovery:this.getDiscoveryService()}}reset(){this.registryService=void 0,this.healthService=void 0,this.intentService=void 0,this.verificationService=void 0,this.discoveryService=void 0}}function d(){return h.getInstance({enhanced:!1,cacheEnabled:!0,intentAIEnabled:!1}).getAllServices()}function u(){return h.getInstance().getVerificationService()}}};